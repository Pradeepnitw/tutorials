06/06/2018
https://golangbot.com/golang-tutorial-part-1-introduction-and-installation/
- concurrency Goroutine and channels
- compiled to native lib
- https://golang.org/ref/spec
- https://golang.org/dl/
-- download macOS

Command used

go build
go clean
go install
// Add to bin

https://golangbot.com/hello-world/

go run $HOME/go/src/hello/helloworld.go

go install hello


https://golangbot.com/variables/

Syntax:
var name type
see copied file vars.go

https://golangbot.com/types/

Basic types in go
- bool
- Numeric Types
-- int8, int16, int32, int64, int
-- uint8, uint16, uint32, uint64, uint
-- float32, float64
-- complex64, complex128
-- byte
-- rune ?
- string

https://golangbot.com/constants/

const a = 55

const b = math.Sqrt(4)//not allowed

A constant's value must be known at compile time.
    
b is a constant and it's value will be evaluated at compile time. math.Sqrt(4) will be evaluated only during runtime.

A string const is *untyped*.

https://golangbot.com/functions/

func functionname(paramtername type) returntype { // }

Named return values: you can predefine variable names at the function signature.

https://golangbot.com/packages/

go install hello/geometry

now run this package's main function with command
/Users/fiona/go/bin/geometry

func init() {}
- for package
- called after package level variables are created; 
- can have multiple in a package
- if package imports other package, other inits are called first dah
- a package will only be init once no matter how many other packages imports it


https://golangbot.com/loops/

Go doesn't have while or do while loops.

https://golangbot.com/switch/

https://golangbot.com/arrays-and-slices/

Mixing values of different types is NOT allowed in Go.

append function: https://play.golang.org/p/v942N777XHO

https://golangbot.com/variadic-functions/

Variadic function: func f(...T)  can accept any number of T.

https://golangbot.com/maps/

https://golangbot.com/strings/
UTF-8 encoded
Using rune to print unicode: https://play.golang.org/p/t4z-f8I-ih
But it's easier to use for range loop on a string.
for index, rune := range s {}

Length of string:
- unicode, use unicode.utf8.RuneCountInString(s)
- ascii just use len(s)

Mutate string: Convert to []rune then string(s) back 
https://play.golang.org/p/GL1cm17IP1

https://golangbot.com/pointers/

a[x] is shorthand for (*a)[x]. (*arr)[0] same as arr[0].

https://golangbot.com/structs/

anonymous fields doesn't have a name. By default it's name is the type.
promoted fields: https://play.golang.org/p/OgeHCJYoEy

